FQDNLookup false
LoadPlugin cpu
LoadPlugin df
LoadPlugin disk
LoadPlugin interface
LoadPlugin load
{% if inventory_hostname in groups['memcached'] | d([]) %}
LoadPlugin memcached
{% endif %}
{% if inventory_hostname in groups['mariadb'] | d([]) %}
LoadPlugin mysql
{% endif %}
LoadPlugin netdevalarm
LoadPlugin warhun
LoadPlugin numa
LoadPlugin syslog
LoadPlugin table
LoadPlugin unixsock
LoadPlugin python
LoadPlugin filecount
LoadPlugin uptime
{% if inventory_hostname in groups['nova-compute'] | d([]) %}
LoadPlugin virt
{% endif %}
{% if ((inventory_hostname in groups['chrony_server'] | d([]))) %}
LoadPlugin chrony
{% endif %}
{% if (inventory_hostname in groups['chrony_server'] | d([])) and (ntp_authentication | d(false) | bool) %}
LoadPlugin exec
{% endif %}
LoadPlugin write_prometheus
{% if hostvars[inventory_hostname]['my_dpdk_interfaces']|length or hostvars[inventory_hostname]['my_ovs_interfaces']|length %}
LoadPlugin ovs_stats
{% endif %}
{% if inventory_hostname in groups['watchmen-api'] | d([]) %}
<LoadPlugin ping>
  Interval 4
</LoadPlugin>
LoadPlugin threshold
{% endif %}

{% if firewall.enabled | d(false) |bool %}
LoadPlugin conntrack
LoadPlugin iptables

<Plugin conntrack>
</Plugin>

<Plugin iptables>
{% if api_address_family == 'ipv4' %}
  Chain "filter" "INPUT_direct"
{% else %}
  Chain "filter" "INPUT_direct"
{% endif %}
</Plugin>
{% endif %}

<Plugin cpu>
    ReportByCpu true
    ReportByState true
    ValuesPercentage true
</Plugin>

{% if hostvars[inventory_hostname]['my_dpdk_interfaces']|length or hostvars[inventory_hostname]['my_ovs_interfaces']|length %}
<Plugin ovs_stats>
    Port "6640"
    Address "127.0.0.1"
    Socket "/var/run/openvswitch/db.sock"
    InterfaceStats  true
</Plugin>
{% endif %}

<Plugin df>
    MountPoint "/overlay/"
    MountPoint "/container/"
    MountPoint "/sys/kernel/"
    MountPoint "//etc/"
    MountPoint "/run/s/"
    MountPoint "/run/docker/"
    MountPoint "/hostmount/var/lib/infra"
    IgnoreSelected true
    ReportByDevice true
    ReportInodes false
    ValuesAbsolute true
    ValuesPercentage true
</Plugin>

{% if inventory_hostname in groups['memcached'] | d([]) %}
<Plugin "memcached">
    Host "{{ api_interface_address }}"
    Port "{{ memcached_port }}"
</Plugin>
{% endif %}

{% if inventory_hostname in groups['mariadb'] | d([]) %}
<Plugin "mysql">
{% if enable_watchmen | d(false) | bool %}
    <Database "watchmen">
        Host "{{ kolla_internal_fqdn }}"
        User "watchmen"
        Password "{{ watchmen_database_password }}"
        Port {{ database_port }}
    </Database>
{% endif %}

{% if enable_nova | d(false) | bool %}
    <Database "nova">
        Host "{{ kolla_internal_fqdn }}"
        User "nova"
        Password "{{ nova_database_password }}"
        Port {{ database_port }}
    </Database>

    <Database "nova_api">
        Host "{{ kolla_internal_fqdn }}"
        User "nova_api"
        Password "{{ nova_api_database_password }}"
        Port {{ database_port }}
    </Database>
{% endif %}

{% if enable_neutron | d(false) | bool %}
    <Database "neutron">
        Host "{{ kolla_internal_fqdn }}"
        User "neutron"
        Password "{{ neutron_database_password }}"
        Port {{ database_port }}
    </Database>
{% endif %}
</Plugin>
{% endif %}

<Plugin "syslog">
  LogLevel "info"
  NotifyLevel "WARNING"
</Plugin>

<Plugin table>
    <Table "/proc/meminfo">
        Instance "meminfo"
        Separator ": "
        <Result>
            Type memory
            InstancesFrom 0
            ValuesFrom 1
        </Result>
    </Table>
</Plugin>

<Plugin unixsock>
    SocketFile "/var/run/collectd/collectd-unixsock"
    SocketGroup "collectd"
    SocketPerms "0770"
    DeleteSocket false
</Plugin>

<Plugin python>
  ModulePath  "/etc/collectd/custom_scripts/certificate_expire"
  Import "certificate_expire"
{% if inventory_hostname in groups['css_hosts'] | d([]) %}
  ModulePath "/etc/collectd/custom_scripts/service_component"
  Import "cpu_memory_utilization"
{% endif %}
  ModulePath "/etc/collectd/custom_scripts/bandwidth_utilization_and_packet_drop_rate"
  Import "linux_and_ovs_port_statistics"
{% if ((inventory_hostname in groups['chrony_server'] | d([]))) %}
  ModulePath  "/etc/collectd/custom_scripts/ntp_alarms"
  Import "ntp_upstream_servers_stratum"
  Import "ntp_upstream_servers_failure"
{% endif %}
</Plugin>

<Plugin "filecount">
    <Directory "/hostmount/var/crash/cores">
    </Directory>
    <Directory "/hostmount/var/crash/kernelcrashes">
    </Directory>
</Plugin>

{% if inventory_hostname in groups['nova-compute'] | d([]) %}
{# must be an include because Ansible 2.8 (and earlier) does not like defined variables referencing undefined variables: migration_interface_address here #}
{# see https://github.com/ansible/ansible/issues/58835 #}
{% include 'collectd.conf.d/virt.conf' %}
{% endif %}

{% if ((inventory_hostname in groups['chrony_server'] | d([]))) %}
<Plugin "chrony">
    Host "localhost"
    Port "323"
</Plugin>
{% endif %}

{% if (inventory_hostname in groups['chrony_server'] | d([])) and (ntp_authentication | d(false) | bool) %}
<Plugin exec>
    Exec "collectd:collectd"  "/etc/collectd/custom_scripts/ntp_auth.sh"
</Plugin>
{% endif %}

<Plugin write_prometheus>
    Host "{{ api_interface_address }}"
    Port "9103"
</Plugin>

<Plugin netdevalarm>
{% set ovs_devices = [] %}
{% set ovs_ports = [] %}
{% set sn_bonds = [] %}
{% set lacp_bonds = [] %}
{% set passthrough_devices = [] %}
{% set aggregate = dict() %}
{% if hostvars[inventory_hostname]['passthrough_devices'] is defined %}
{%   for pt_dev in hostvars[inventory_hostname]['passthrough_devices'] %}
{{ passthrough_devices.append(pt_dev['device']) -}}
{%   endfor %}
{% endif %}
{% if hostvars[inventory_hostname]['sn_bond_devices'] is defined %}
{%   for sn_dev in hostvars[inventory_hostname]['sn_bond_devices'] %}
{%     if sn_dev['bond_options']['bond_mode'] == "802.3ad" %}
{{ sn_bonds.append(sn_dev['device']) -}}
{%     endif %}
{%   endfor %}
{% endif %}
{% if hostvars[inventory_hostname]['my_bond_interfaces'] is defined %}
{%   for bond_dev in hostvars[inventory_hostname]['my_bond_interfaces'] %}
{%     if bond_dev['bond_options']['bond_mode'] == "802.3ad" %}
{{ lacp_bonds.append(bond_dev['device']) -}}
{%     endif %}
{%   endfor %}
{% endif %}
{% if hostvars[inventory_hostname]['my_dpdk_interfaces']|length or hostvars[inventory_hostname]['my_ovs_interfaces']|length %}
    <ovsdb_connection>
        tcp_ip          "127.0.0.1" {{ ovsdb_port }}
        unix_socket     "/hostmount/run/openvswitch/db.sock"
    </ovsdb_connection>
{% endif %}
{% for interface in hostvars[inventory_hostname]['my_dpdk_interfaces'] + hostvars[inventory_hostname]['my_ovs_interfaces'] %}
{%  if interface['bond_slaves'] is defined %}
{%   for device in interface.get('bond_slaves', []) %}
{{ ovs_devices.append(device) -}}
{%   endfor %}
{%   if interface['port'] is defined %}
{{ ovs_ports.append(interface['port']) -}}
{%   endif %}
{%  elif interface['port'] is defined %}
{{ ovs_devices.append(interface.get('port')) -}}
{%  endif %}
{% endfor %}
{% if hostvars[inventory_hostname]['my_port_mappings'] is defined %}
{%  for interface in hostvars[inventory_hostname]['my_port_mappings'] %}
{%     if interface['aggregator'] is defined %}
{%       if interface['aggregator'] in aggregate %}
{% set list_of_interfaces = aggregate[interface['aggregator']] %}
{{ list_of_interfaces.append(interface['name']) -}}
{{ aggregate.update( {interface['aggregator']: list_of_interfaces}) -}}
{%       else %}
{{ aggregate.update({ interface['aggregator']: [interface['name']] }) -}}
{%       endif %}
{%     elif interface['name'] in ovs_devices %}
    ovs {{ interface['name'] }}
{%     elif interface['name'] not in passthrough_devices %}
    netlink {{ interface['name'] }}
{%     endif %}
{%   endfor %}
{% endif %}
{% for agg, interface_list in aggregate.items() %}
{%   if interface_list | length > 1 %}
    <aggregator {{ agg }}>
{%   endif %}
{%   for item in interface_list %}
{%     if item in ovs_devices %}
    ovs {{ item }}
{%     else %}
    netlink {{ item }}
{%     endif %}
{%   endfor %}
{%   if interface_list | length > 1 %}
    </aggregator>
{%   endif %}
{% endfor %}

{% for port in ovs_ports %}
    ovs_bond {{ port }} "type_instance=bond_status"
{% endfor %}

{% for bond in sn_bonds + lacp_bonds %}
    <sysfs_bond_mac {{ bond }}>
        type_instance    bond_status
        success_states   up
        overall_threshold 1
    </sysfs_bond_mac>
{% endfor %}

{% for pt_dev in passthrough_devices %}
    <sysfs_class_net {{ pt_dev }} >
      <thresholds>
        dormant 4
        lowerlayerdown 1
        unknown 3
        testing 4
        down 5
        notpresent 3
        __bad_content__ 5
      </thresholds>
      overall_threshold 5
      success_states "up"
    </sysfs_class_net>
{% endfor %}
</Plugin>

<Plugin warhun>
    sync_url    {{ hostvars[inventory_hostname]['ip'] }} 4480 "/watchmen/active_alarm_list.cgi"
    region_name  "{{ system_name }}"
    cee_function "1"
    sender_script_argv    "/usr/bin/python3" "/opt/warhun/alarm_send.py"
      <From NetDevAlarm>
        <Filter plugin_instance>
          <common>
            type_instance  "interface_status"
          </common>
        </Filter>
{%   if aggregate|length > 0 %}
        <Filter plugin_instance>
          <common>
            type_instance  "link_aggregator_status"
          </common>
        </Filter>
{% endif %}
{%   if (ovs_ports|length > 0) or (sn_bonds|length > 0) %}
        <Filter plugin_instance>
          <common>
            type_instance  "bond_status"
          </common>
        </Filter>
{% endif %}
    </From>
{% if inventory_hostname in groups['watchmen-api'] | d([]) %}
    <From ping>
      <Filter type_instance>
        <common>
           type  "ping_droprate"
        </common>
        auxiliary_data "aggregator:control"
      </Filter>
    </From>
{%   endif %}
</Plugin>
{% if (groups['neutron-generic-sdn'] is defined) or (csc_server_enabled is defined) %}
{% if ((inventory_hostname in groups['neutron-generic-sdn'] | d([])) and
      (inventory_hostname in groups['nova-compute'] | d([]))) or (csc_server_enabled | bool) %}
LoadPlugin tcpconns
<Plugin tcpconns>
  ListeningPorts false
  {% with enable_ovsdb_openflow_ports=((inventory_hostname in groups['neutron-server'] | d([])) or
        (inventory_hostname in groups['nova-compute'] | d([])) and (csc_server_enabled | bool)) %}
  {%- if enable_ovsdb_openflow_ports -%}
  RemotePort 6653
  RemotePort 6640
  {% elif hostvars[inventory_hostname]['custom_properties']['neutron-generic-sdn']['sbi_ssl']['enabled'] | d(false) | bool -%}
  RemotePort 6634
  {% else %}
  RemotePort 6633
  {% endif %}
  {% endwith %}
</Plugin>
{% endif %}
{% endif %}
{% if inventory_hostname in groups['watchmen-api'] | d([]) %}
<Plugin ping>
{% set ipv4 = ip_info.get('cee-ipv4') %}
{% set ipv6 = ip_info.get('cee-ipv6') %}
{% if ipv6 is not none %}
{% set target = ipv6 %}
{% elif ipv4 is not none %}
{% set target = ipv4 %}
{% endif %}
{% for name, ip in target.items() -%}
{% if name == inventory_hostname %}
  SourceAddress {{ ip }}
{% elif name in groups['physical_hosts'] | d([]) %}
  Host "{{ name }}.{{ hostvars[name]['my_dns_config']['domain'] }}"
{% endif %}
{% for device, address in interface_addresses.items() %}
{% if address == ip %}
  Device {{ device }}
{% endif %}
{% endfor %}
{% endfor %}
</Plugin>
<Plugin threshold>
  <Plugin ping>
    <Type "ping_droprate">
      WarningMax 0.75
      FailureMax 1
    </Type>
  </Plugin>
</Plugin>
{% endif %}
