# cinder.conf
# vim: ft=yaml.jinja2
# https://docs.openstack.org/cinder/latest/configuration/block-storage/drivers/dell-emc-vxflex-driver.html

##   The volume backends for cinder-volume (including the DEFAULT backend) are configured via
## cinder-volume service component's plugins' dict (pluginConfig)
##   Note, that in a CEE cluster, there can be more than one cinder-volume services, but they
## must apply to different hostProfiles and thus to different hosts. This way one can
## can have multiple pluginConfig-s for cinder-volume. This can be used in case of configuring
## different storage availability zones.
##   PluginConfig should also be used instead of flavors for cinder-volume service component.
##   Any logic that derives backend parameters should be placed to the inventory generators.

{% if cinder_volume_backends is defined %}
{%   for name, params in cinder_volume_backends.items() %}
{%     if params is mapping %}
[{{name}}]
{%       for pn,pv in params.items() %}
{%         if pn not in ['extra_params'] %}
{{pn}} = {{pv}}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endfor %}
{% endif %}

[DEFAULT]
# (Integer) Size of RPC connection pool.
# default: 30
rpc_conn_pool_size = 150

# (Integer) Size of executor thread pool.
# default: 64
executor_thread_pool_size = 256

# Enables the Force option on upload_to_image. This enables running
# upload_volume on in-use volumes for backends that support it. (boolean value)
enable_force_upload = true


[database]
# (Integer) Maximum number of SQL connections to keep open in a pool.
# default: None
max_pool_size = 150

# (Integer) If set, use this value for max_overflow with SQLAlchemy.
# default: 50
max_overflow = 300
